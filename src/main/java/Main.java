public class Main {
    public static void main(String[] args) {
//
//        AnnotationConfigApplicationContext context =
//                new AnnotationConfigApplicationContext(AppConfig.class, RestTemplateConf.class);
//
//        try {
//            LocationAddingService locationAddingService = context.getBean(LocationAddingService.class);
//            LocationSearchDao searchDao = context.getBean(LocationSearchDao.class);
//            LocationMapper locationMapper = context.getBean(LocationMapper.class);
//            SessionFactory sessionFactory = context.getBean(SessionFactory.class);
//
//            // –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
//            UserEntity user;
//            try (Session session = sessionFactory.openSession()) {
//                Integer existingUserId = 1;
//              user = session.<UserEntity>get(UserEntity.class, existingUserId);
//                if (user == null) {
//                    throw new IllegalStateException("User with id " + existingUserId + " not found");
//                }
//            }
//
//            // –î–æ–¥–∞—î–º–æ –ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
//            String cityName = "Kyiv";
//            locationAddingService.addLocation(cityName, user);
//            System.out.println("‚úÖ –õ–æ–∫–∞—Ü—ñ—è –¥–æ–¥–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: " + user.getLogin());
//
//            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–±–µ—Ä–µ–≥–ª–∞—Å—è –ª–æ–∫–∞—Ü—ñ—è
//            Optional<LocationEntity> foundEntity = searchDao.findLocationByName(cityName);
//            foundEntity.ifPresentOrElse(
//                    e -> System.out.println("üîé –õ–æ–∫–∞—Ü—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: " + locationMapper.dto(e)),
//                    () -> System.out.println("‚ùå –õ–æ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
//            );
//
//        } finally {
//            context.close();
//        }
    }
}
//public class Main {
//    public static void main(String[] args) {
//
//        AnnotationConfigApplicationContext context =
//                new AnnotationConfigApplicationContext(AppConfig.class, RestTemplateConf.class);
//
//        try {
//            LocationAddingService locationAddingService = context.getBean(LocationAddingService.class);
//            LocationSearchDao searchDao = context.getBean(LocationSearchDao.class);
//            DelistDao delistDao = context.getBean(DelistDao.class);
//            LocationMapper locationMapper = context.getBean(LocationMapper.class);
//            SessionFactory sessionFactory = context.getBean(SessionFactory.class);
//
//            // –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
//            UserEntity user;
//            try (Session session = sessionFactory.openSession()) {
//                Integer existingUserId = 1;
//                user = session.get(UserEntity.class, existingUserId);
//                if (user == null) {
//                    throw new IllegalStateException("User with id " + existingUserId + " not found");
//                }
//            }
//
//            // –î–æ–¥–∞—î–º–æ –ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
//            String cityName = "Kyiv";
//            locationAddingService.addLocation(cityName, user);
//            System.out.println("‚úÖ –õ–æ–∫–∞—Ü—ñ—è –¥–æ–¥–∞–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: " + user.getLogin());
//
//            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–±–µ—Ä–µ–≥–ª–∞—Å—è –ª–æ–∫–∞—Ü—ñ—è
//            Optional<LocationEntity> foundEntity = searchDao.findLocationByName(cityName);
//            foundEntity.ifPresentOrElse(
//                    e -> System.out.println("üîé –õ–æ–∫–∞—Ü—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: " + locationMapper.dto(e)),
//                    () -> System.out.println("–õ–æ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
//            );
//
//            // –í–∏–¥–∞–ª—è—î–º–æ –ª–æ–∫–∞—Ü—ñ—é
//            delistDao.deleteLocationByName(cityName);
//            System.out.println("üóëÔ∏è –õ–æ–∫–∞—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞");
//
//            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ª–æ–∫–∞—Ü—ñ—ó –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î
//            Optional<LocationEntity> afterDelete = searchDao.findLocationByName(cityName);
//            afterDelete.ifPresentOrElse(
//                    e -> System.out.println(" –õ–æ–∫–∞—Ü—ñ—è –≤—Å–µ —â–µ —î –≤ –ë–î!"),
//                    () -> System.out.println("–õ–æ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ –ë–î")
//            );
//
//        } finally {
//            context.close();
//        }
//    }
//}
//public class Main {
//    public static void main(String[] args) {
//
//        // 1. –°—Ç–≤–æ—Ä—é—î–º–æ Spring Context –∑ –¥–≤–æ—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
//        AnnotationConfigApplicationContext context =
//                new AnnotationConfigApplicationContext(AppConfig.class, RestTemplateConf.class);
//
//        try {
//            // 2. –û—Ç—Ä–∏–º—É—î–º–æ –±—ñ–Ω—ñ
//            LocationSearchService searchService = context.getBean(LocationSearchService.class);
//            LocationAddingDao addingDao = context.getBean(LocationAddingDao.class);
//            LocationSearchDao searchDao = context.getBean(LocationSearchDao.class);
//            DelistDao delistDao = context.getBean(DelistDao.class);
//            LocationMapper locationMapper = context.getBean(LocationMapper.class);
//
//            // 3. –ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É
//            String cityName = "Kyiv";
//
//            // 4. –®—É–∫–∞—î–º–æ –ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ OpenWeatherMap API
//            Optional<LocationDto> locationDtoOpt = searchService.searchLocation(cityName);//
//
//            if (locationDtoOpt.isPresent()) {
//                LocationDto locationDto = locationDtoOpt.get();
//                System.out.println("üîç –ó–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ API: " + locationDto);
//
//                // 5. –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ DTO –≤ Entity
//                LocationEntity entity = locationMapper.entity(locationDto);
//
//                // 6. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
//                addingDao.saveLocation(entity);
//                System.out.println("‚úÖ –õ–æ–∫–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –ë–î: " + entity);
//
//                // 7. –®—É–∫–∞—î–º–æ –≤ –±–∞–∑—ñ
//                Optional<LocationEntity> foundEntity = searchDao.findLocationByName(cityName);
//                foundEntity.ifPresentOrElse(
//                        e -> System.out.println("üîé –õ–æ–∫–∞—Ü—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: " + locationMapper.dto(e)),
//                        () -> System.out.println("‚ùå –õ–æ–∫–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
//                );
//
//                // 8. –í–∏–¥–∞–ª—è—î–º–æ –ª–æ–∫–∞—Ü—ñ—é (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏)
////                delistDao.deleteLocationByName(cityName);
////                System.out.println("üóëÔ∏è –õ–æ–∫–∞—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞");
//
//            } else {
//                System.out.println("‚ùå –õ–æ–∫–∞—Ü—ñ—é –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ API");
//            }
//
//        } finally {
//            // 9. –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
//            context.close();
//        }
//    }
//}
//    public static void main(String[] args) throws Exception {
//        // 1. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Hibernate (AppConfig)
//        AppConfig appConfig = new AppConfig();
//        SessionFactory sessionFactory = appConfig.sessionFactory(appConfig.dataSource());
//
//        // 2. DAO + Mapper + Service
//        UserAuthorizationDao dao = new UserAuthorizationDao(sessionFactory);
//        UserMapper mapper = new UserMapperImpl(); // –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π MapStruct
//        UserAuthorizationService service = new UserAuthorizationService(dao, mapper);
//
//        // 3. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞ —ñ —Ö–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
//        String login = "john";
//        String rawPassword = "12345";
//        String hashedPassword = HashPassword.hashPassword(rawPassword);
//
//        UserEntity newUser = new UserEntity();
//        newUser.setLogin(login);
//        newUser.setPassword(hashedPassword);
//
//        try (Session session = sessionFactory.openSession()) {
//            Transaction tx = session.beginTransaction();
//            session.persist(newUser);
//            tx.commit();
//        }
//
//        System.out.println("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π: " + newUser);
//
//        // 4. –¢–µ—Å—Ç—É—î–º–æ –ª–æ–≥—ñ–Ω –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–∞—Ä–æ–ª–µ–º
//        System.out.println("\n--- –¢–µ—Å—Ç: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å ---");
//        service.login(login, "12345").ifPresentOrElse(
//                user -> System.out.println("–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥: " + user),
//                () -> System.out.println("‚ùå –õ–æ–≥—ñ–Ω –Ω–µ –≤–¥–∞–≤—Å—è")
//        );
//
//        // 5. –¢–µ—Å—Ç—É—î–º–æ –ª–æ–≥—ñ–Ω –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø–∞—Ä–æ–ª–µ–º
//        System.out.println("\n--- –¢–µ—Å—Ç: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å ---");
//        service.login(login, "wrong-pass").ifPresentOrElse(
//                user -> System.out.println("–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥: " + user),
//                () -> System.out.println("‚ùå –õ–æ–≥—ñ–Ω –Ω–µ –≤–¥–∞–≤—Å—è")
//        );
//
//        sessionFactory.close();
//
//    }
//}
